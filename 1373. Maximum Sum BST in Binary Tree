
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    struct info
    {
        bool isBST;
        int sum;
        int min;
        int max;
        bool isNULL;
    };
    info helper(TreeNode* root, int& ans)
    {
        if(root == NULL)
            return {true,0,INT_MIN,INT_MAX, true};
        if(root->left == NULL && root->right == NULL)
        {
            ans = max(ans,root->val);
            return {true, root->val,root->val, root->val, false};
        }
        auto left = helper(root->left,ans);
        auto right = helper(root->right,ans);
        
        if(left.isBST && right.isBST)
        {
           if(left.isNULL)
           {
               if(root->val < right.min) 
               {
                   ans = max(ans, root->val + right.sum);
                   return {true, root->val + right.sum, root->val, right.max, false};
               }
           }
           else if(right.isNULL)
           {
               if(root->val > left.max)
               {
                   ans = max(ans, root->val + left.sum);
                   return {true, left.sum + root->val, left.min,root->val, false};
               }
           }
           else
           {
               if(root->val > left.max && root->val < right.min)
               {
                   ans = max(ans, root->val + left.sum + right.sum);
                   return {true, root->val + right.sum + left.sum, left.min, right.max, false};
               }
           }
        }
            return {false,0,0,0,false};
    }



    int maxSumBST(TreeNode* root) {
        int ans = 0;
        helper(root, ans);  
        return ans; 
    }
};
